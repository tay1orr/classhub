generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String
  passwordHash String?
  role         String   @default("STUDENT") // ADMIN, STUDENT
  isApproved   Boolean  @default(false)
  image        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  classrooms    UserClassroom[]
  posts         Post[]
  comments      Comment[]
  postLikes     PostLike[]
  commentLikes  CommentLike[]
  commentReports CommentReport[]
  announcements Announcement[]

  // NextAuth
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Classroom {
  id      String @id @default(cuid())
  grade   Int
  classNo Int
  name    String

  // Relations
  users UserClassroom[]
  posts Post[]
  announcements Announcement[]

  @@unique([grade, classNo])
  @@map("classrooms")
}

model UserClassroom {
  userId      String
  classroomId String

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  classroom Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)

  @@id([userId, classroomId])
  @@map("user_classrooms")
}

model Board {
  id   String @id @default(cuid())
  key  String @unique  // FREE, ASSIGNMENT, EXAM
  name String

  posts Post[]

  @@map("boards")
}

model Post {
  id          String    @id @default(cuid())
  boardId     String
  classroomId String
  authorId    String
  title       String
  content     String
  isAnonymous Boolean   @default(false)
  isPinned    Boolean   @default(false)
  views       Int       @default(0)
  likesCount  Int       @default(0)
  dislikesCount Int     @default(0)
  image       String?   // For photo posts
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relations
  board     Board     @relation(fields: [boardId], references: [id])
  classroom Classroom @relation(fields: [classroomId], references: [id])
  author    User      @relation(fields: [authorId], references: [id])
  comments  Comment[]
  likes     PostLike[]

  @@index([boardId, classroomId])
  @@index([createdAt])
  @@index([isPinned, createdAt])
  @@index([title, content])
  @@map("posts")
}

model Comment {
  id          String    @id @default(cuid())
  postId      String
  authorId    String
  parentId    String?   // For nested replies
  content     String
  isAnonymous Boolean   @default(false)
  likesCount  Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relations
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id])
  parent Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")
  likes  CommentLike[]
  reports CommentReport[]

  @@index([postId])
  @@index([parentId])
  @@map("comments")
}

model Todo {
  id        String   @id @default(cuid())
  text      String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("todos")
}

model PostLike {
  id     String @id @default(cuid())
  userId String
  postId String
  isLike Boolean // true = like, false = dislike
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("post_likes")
}

model CommentLike {
  id        String @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@map("comment_likes")
}

model CommentReport {
  id        String @id @default(cuid())
  userId    String
  commentId String
  reason    String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@map("comment_reports")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String
  authorId  String
  classroomId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author    User      @relation(fields: [authorId], references: [id])
  classroom Classroom @relation(fields: [classroomId], references: [id])

  @@index([classroomId, createdAt])
  @@map("announcements")
}